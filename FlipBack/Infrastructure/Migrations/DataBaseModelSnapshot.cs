// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DataBase))]
    partial class DataBaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entity.MessageEntitys.Message", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateSender")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsChanged")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageBoxId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageText")
                        .HasColumnType("text");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MessageBoxId");

                    b.HasIndex("UserId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Core.Entity.MessageEntitys.MessageBox", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Image")
                        .IsUnique();

                    b.ToTable("MessageBox");
                });

            modelBuilder.Entity("Core.Entity.MessageEntitys.MessageBoxUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("MessageBoxId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "MessageBoxId");

                    b.HasIndex("MessageBoxId");

                    b.ToTable("MessageBoxUsers");
                });

            modelBuilder.Entity("Core.Entity.MessageEntitys.MessageFiles", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageId")
                        .HasColumnType("text");

                    b.Property<string>("PathName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageFiles");
                });

            modelBuilder.Entity("Core.Entity.PostEntitys.Post", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Views")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Core.Entity.PostEntitys.PostAnswer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CommentaryId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommentaryId");

                    b.HasIndex("UserId");

                    b.ToTable("PostAnswer");
                });

            modelBuilder.Entity("Core.Entity.PostEntitys.PostCommentary", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PostId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostCommentary");
                });

            modelBuilder.Entity("Core.Entity.PostEntitys.PostFiles", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PathName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostFiles");
                });

            modelBuilder.Entity("Core.Entity.PostEntitys.PostReaction", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("PostId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("PostReaction");
                });

            modelBuilder.Entity("Core.Entity.PostEntitys.UserPost", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("PostId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("UserPost");
                });

            modelBuilder.Entity("Core.Entity.ReelsEntity.Reels", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Views")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reels");
                });

            modelBuilder.Entity("Core.Entity.ReelsEntity.ReelsAnswer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CommentaryId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommentaryId");

                    b.HasIndex("UserId");

                    b.ToTable("ReelsAnswer");
                });

            modelBuilder.Entity("Core.Entity.ReelsEntity.ReelsCommentary", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReelsId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReelsId");

                    b.HasIndex("UserId");

                    b.ToTable("ReelsCommentary");
                });

            modelBuilder.Entity("Core.Entity.ReelsEntity.ReelsFiles", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PathName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReelsId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReelsId");

                    b.ToTable("ReelsFiles");
                });

            modelBuilder.Entity("Core.Entity.ReelsEntity.ReelsReaction", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("ReelsId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "ReelsId");

                    b.HasIndex("ReelsId");

                    b.ToTable("ReelsReaction");
                });

            modelBuilder.Entity("Core.Entity.ReelsEntity.UserReels", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("ReelsId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "ReelsId");

                    b.HasIndex("ReelsId");

                    b.ToTable("UserReels");
                });

            modelBuilder.Entity("Core.Entity.UserEntitys.Follow", b =>
                {
                    b.Property<string>("FollowingId")
                        .HasColumnType("text");

                    b.Property<string>("FollowerId")
                        .HasColumnType("text");

                    b.HasKey("FollowingId", "FollowerId");

                    b.HasIndex("FollowerId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("Core.Entity.UserEntitys.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Core.Entity.UserEntitys.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Core.Entity.UserEntitys.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateOnly>("DateCreate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrivateUser")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserImage")
                        .HasColumnType("text");

                    b.Property<string>("UserImagePath")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserImage")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Core.Entity.UserEntitys.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entity.MessageEntitys.Message", b =>
                {
                    b.HasOne("Core.Entity.MessageEntitys.MessageBox", "MessageBox")
                        .WithMany("Messages")
                        .HasForeignKey("MessageBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entity.UserEntitys.User", "User")
                        .WithMany("Message")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageBox");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entity.MessageEntitys.MessageBoxUser", b =>
                {
                    b.HasOne("Core.Entity.MessageEntitys.MessageBox", "MessageBox")
                        .WithMany("Users")
                        .HasForeignKey("MessageBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entity.UserEntitys.User", "User")
                        .WithMany("MessageBoxs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageBox");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entity.MessageEntitys.MessageFiles", b =>
                {
                    b.HasOne("Core.Entity.MessageEntitys.Message", "Message")
                        .WithMany("Files")
                        .HasForeignKey("MessageId");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Core.Entity.PostEntitys.Post", b =>
                {
                    b.HasOne("Core.Entity.UserEntitys.User", "User")
                        .WithMany("CreatedPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entity.PostEntitys.PostAnswer", b =>
                {
                    b.HasOne("Core.Entity.PostEntitys.PostCommentary", "Commentary")
                        .WithMany("PostAnswers")
                        .HasForeignKey("CommentaryId");

                    b.HasOne("Core.Entity.UserEntitys.User", "User")
                        .WithMany("PostAnswer")
                        .HasForeignKey("UserId");

                    b.Navigation("Commentary");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entity.PostEntitys.PostCommentary", b =>
                {
                    b.HasOne("Core.Entity.PostEntitys.Post", "Post")
                        .WithMany("Commentary")
                        .HasForeignKey("PostId");

                    b.HasOne("Core.Entity.UserEntitys.User", "User")
                        .WithMany("PostCommentary")
                        .HasForeignKey("UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entity.PostEntitys.PostFiles", b =>
                {
                    b.HasOne("Core.Entity.PostEntitys.Post", "Post")
                        .WithMany("Files")
                        .HasForeignKey("PostId");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Core.Entity.PostEntitys.PostReaction", b =>
                {
                    b.HasOne("Core.Entity.PostEntitys.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entity.UserEntitys.User", "User")
                        .WithMany("PostReaction")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entity.PostEntitys.UserPost", b =>
                {
                    b.HasOne("Core.Entity.PostEntitys.Post", "Post")
                        .WithMany("Saveds")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entity.UserEntitys.User", "User")
                        .WithMany("SavedPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entity.ReelsEntity.Reels", b =>
                {
                    b.HasOne("Core.Entity.UserEntitys.User", "User")
                        .WithMany("CreatedReels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entity.ReelsEntity.ReelsAnswer", b =>
                {
                    b.HasOne("Core.Entity.ReelsEntity.ReelsCommentary", "Commentary")
                        .WithMany("ReelsAnswers")
                        .HasForeignKey("CommentaryId");

                    b.HasOne("Core.Entity.UserEntitys.User", "User")
                        .WithMany("ReelsAnswer")
                        .HasForeignKey("UserId");

                    b.Navigation("Commentary");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entity.ReelsEntity.ReelsCommentary", b =>
                {
                    b.HasOne("Core.Entity.ReelsEntity.Reels", "Reels")
                        .WithMany("Commentary")
                        .HasForeignKey("ReelsId");

                    b.HasOne("Core.Entity.UserEntitys.User", "User")
                        .WithMany("ReelsCommentary")
                        .HasForeignKey("UserId");

                    b.Navigation("Reels");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entity.ReelsEntity.ReelsFiles", b =>
                {
                    b.HasOne("Core.Entity.ReelsEntity.Reels", "Reels")
                        .WithMany("Files")
                        .HasForeignKey("ReelsId");

                    b.Navigation("Reels");
                });

            modelBuilder.Entity("Core.Entity.ReelsEntity.ReelsReaction", b =>
                {
                    b.HasOne("Core.Entity.ReelsEntity.Reels", "Reels")
                        .WithMany("Reactions")
                        .HasForeignKey("ReelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entity.UserEntitys.User", "User")
                        .WithMany("ReelsReaction")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reels");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entity.ReelsEntity.UserReels", b =>
                {
                    b.HasOne("Core.Entity.ReelsEntity.Reels", "Reels")
                        .WithMany("Saveds")
                        .HasForeignKey("ReelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entity.UserEntitys.User", "User")
                        .WithMany("SavedReels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reels");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entity.UserEntitys.Follow", b =>
                {
                    b.HasOne("Core.Entity.UserEntitys.User", "Following")
                        .WithMany("Followers")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entity.UserEntitys.User", "Follower")
                        .WithMany("Followings")
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Follower");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("Core.Entity.UserEntitys.RefreshToken", b =>
                {
                    b.HasOne("Core.Entity.UserEntitys.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entity.UserEntitys.UserRole", b =>
                {
                    b.HasOne("Core.Entity.UserEntitys.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entity.UserEntitys.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Core.Entity.UserEntitys.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Entity.UserEntitys.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Entity.UserEntitys.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Entity.UserEntitys.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entity.MessageEntitys.Message", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Core.Entity.MessageEntitys.MessageBox", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Entity.PostEntitys.Post", b =>
                {
                    b.Navigation("Commentary");

                    b.Navigation("Files");

                    b.Navigation("Reactions");

                    b.Navigation("Saveds");
                });

            modelBuilder.Entity("Core.Entity.PostEntitys.PostCommentary", b =>
                {
                    b.Navigation("PostAnswers");
                });

            modelBuilder.Entity("Core.Entity.ReelsEntity.Reels", b =>
                {
                    b.Navigation("Commentary");

                    b.Navigation("Files");

                    b.Navigation("Reactions");

                    b.Navigation("Saveds");
                });

            modelBuilder.Entity("Core.Entity.ReelsEntity.ReelsCommentary", b =>
                {
                    b.Navigation("ReelsAnswers");
                });

            modelBuilder.Entity("Core.Entity.UserEntitys.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Core.Entity.UserEntitys.User", b =>
                {
                    b.Navigation("CreatedPosts");

                    b.Navigation("CreatedReels");

                    b.Navigation("Followers");

                    b.Navigation("Followings");

                    b.Navigation("Message");

                    b.Navigation("MessageBoxs");

                    b.Navigation("PostAnswer");

                    b.Navigation("PostCommentary");

                    b.Navigation("PostReaction");

                    b.Navigation("ReelsAnswer");

                    b.Navigation("ReelsCommentary");

                    b.Navigation("ReelsReaction");

                    b.Navigation("RefreshTokens");

                    b.Navigation("SavedPosts");

                    b.Navigation("SavedReels");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
